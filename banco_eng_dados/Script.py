# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UwNi57VADIBN4o0iJJMHsqN-PnD6IGx1
"""

!pip install faker

import sqlite3
from faker import Faker
import random

faker = Faker('pt_BR')
conn = sqlite3.connect('exemplo.db')
cursor = conn.cursor()

def criar_tabelas():
    cursor.executescript("""
    CREATE TABLE IF NOT EXISTS cliente (
        id_cliente INTEGER PRIMARY KEY,
        nome TEXT,
        email TEXT,
        telefone TEXT
    );

    CREATE TABLE IF NOT EXISTS endereco (
        id_endereco INTEGER PRIMARY KEY,
        id_cliente INTEGER,
        rua TEXT,
        numero TEXT,
        cidade TEXT,
        estado TEXT,
        cep TEXT,
        FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente)
    );

    CREATE TABLE IF NOT EXISTS autor (
        id_autor INTEGER PRIMARY KEY,
        nome TEXT,
        nacionalidade TEXT
    );

    CREATE TABLE IF NOT EXISTS editora (
        id_editora INTEGER PRIMARY KEY,
        nome TEXT,
        contato TEXT
    );

    CREATE TABLE IF NOT EXISTS livro (
        id_livro INTEGER PRIMARY KEY,
        titulo TEXT,
        id_autor INTEGER,
        id_editora INTEGER,
        ano_publicacao INTEGER,
        FOREIGN KEY (id_autor) REFERENCES autor(id_autor),
        FOREIGN KEY (id_editora) REFERENCES editora(id_editora)
    );

    CREATE TABLE IF NOT EXISTS pedido (
        id_pedido INTEGER PRIMARY KEY,
        id_cliente INTEGER,
        data TEXT,
        status TEXT,
        FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente)
    );

    CREATE TABLE IF NOT EXISTS item_pedido (
        id_item INTEGER PRIMARY KEY,
        id_pedido INTEGER,
        id_livro INTEGER,
        quantidade INTEGER,
        preco_unitario REAL,
        FOREIGN KEY (id_pedido) REFERENCES pedido(id_pedido),
        FOREIGN KEY (id_livro) REFERENCES livro(id_livro)
    );

    CREATE TABLE IF NOT EXISTS funcionario (
        id_funcionario INTEGER PRIMARY KEY,
        nome TEXT,
        cargo TEXT,
        email TEXT
    );

    CREATE TABLE IF NOT EXISTS estoque (
        id_estoque INTEGER PRIMARY KEY,
        id_livro INTEGER,
        quantidade INTEGER,
        FOREIGN KEY (id_livro) REFERENCES livro(id_livro)
    );

    CREATE TABLE IF NOT EXISTS pagamento (
        id_pagamento INTEGER PRIMARY KEY,
        id_pedido INTEGER,
        forma_pagamento TEXT,
        valor_total REAL,
        data TEXT,
        FOREIGN KEY (id_pedido) REFERENCES pedido(id_pedido)
    );
    """)
    conn.commit()

def insert_cliente(n):
    for _ in range(n):
        cursor.execute("INSERT INTO cliente (nome, email, telefone) VALUES (?, ?, ?)", (
            faker.name(), faker.email(), faker.phone_number()))
    conn.commit()

def insert_endereco(n):
    ids = cursor.execute("SELECT id_cliente FROM cliente").fetchall()
    for _ in range(n):
        id_cliente = random.choice(ids)[0]
        cursor.execute("INSERT INTO endereco (id_cliente, rua, numero, cidade, estado, cep) VALUES (?, ?, ?, ?, ?, ?)", (
            id_cliente, faker.street_name(), str(faker.building_number()),
            faker.city(), faker.estado_sigla(), faker.postcode()))
    conn.commit()

def insert_autor(n):
    for _ in range(n):
        cursor.execute("INSERT INTO autor (nome, nacionalidade) VALUES (?, ?)", (
            faker.name(), faker.country()))
    conn.commit()

def insert_editora(n):
    for _ in range(n):
        cursor.execute("INSERT INTO editora (nome, contato) VALUES (?, ?)", (
            faker.company(), faker.email()))
    conn.commit()

def insert_livro(n):
    autores = cursor.execute("SELECT id_autor FROM autor").fetchall()
    editoras = cursor.execute("SELECT id_editora FROM editora").fetchall()
    for _ in range(n):
        cursor.execute("INSERT INTO livro (titulo, id_autor, id_editora, ano_publicacao) VALUES (?, ?, ?, ?)", (
            faker.catch_phrase(), random.choice(autores)[0],
            random.choice(editoras)[0], random.randint(1950, 2024)))
    conn.commit()

def insert_pedido(n):
    clientes = cursor.execute("SELECT id_cliente FROM cliente").fetchall()
    for _ in range(n):
        cursor.execute("INSERT INTO pedido (id_cliente, data, status) VALUES (?, ?, ?)", (
            random.choice(clientes)[0], faker.date_between(start_date='-3y', end_date='today').isoformat(),
            random.choice(['Pago', 'Pendente', 'Cancelado'])))
    conn.commit()

def insert_item_pedido(n):
    pedidos = cursor.execute("SELECT id_pedido FROM pedido").fetchall()
    livros = cursor.execute("SELECT id_livro FROM livro").fetchall()
    for _ in range(n):
        cursor.execute("INSERT INTO item_pedido (id_pedido, id_livro, quantidade, preco_unitario) VALUES (?, ?, ?, ?)", (
            random.choice(pedidos)[0], random.choice(livros)[0],
            random.randint(1, 5), round(random.uniform(20.0, 200.0), 2)))
    conn.commit()

def insert_funcionario(n):
    for _ in range(n):
        cursor.execute("INSERT INTO funcionario (nome, cargo, email) VALUES (?, ?, ?)", (
            faker.name(), random.choice(['Vendedor', 'Gerente', 'Caixa', 'Estoquista']),
            faker.email()))
    conn.commit()

def insert_estoque(n):
    livros = cursor.execute("SELECT id_livro FROM livro").fetchall()
    for _ in range(n):
        cursor.execute("INSERT INTO estoque (id_livro, quantidade) VALUES (?, ?)", (
            random.choice(livros)[0], random.randint(0, 100)))
    conn.commit()

def insert_pagamento(n):
    pedidos = cursor.execute("SELECT id_pedido FROM pedido").fetchall()
    for _ in range(n):
        cursor.execute("INSERT INTO pagamento (id_pedido, forma_pagamento, valor_total, data) VALUES (?, ?, ?, ?)", (
            random.choice(pedidos)[0], random.choice(['Cartão', 'Boleto', 'Pix']),
            round(random.uniform(30.0, 500.0), 2), faker.date_between(start_date='-3y', end_date='today').isoformat()))
    conn.commit()

# Execução principal
criar_tabelas()
insert_cliente(25000)
insert_endereco(25000)
insert_autor(5000)
insert_editora(1000)
insert_livro(30000)
insert_pedido(30000)
insert_item_pedido(50000)
insert_funcionario(2000)
insert_estoque(10000)
insert_pagamento(22000)
conn.close()

from google.colab import files
files.download("exemplo.db")

import sqlite3
import pandas as pd

conn = sqlite3.connect('exemplo.db')
df = pd.read_sql_query("SELECT * FROM pagamento", conn)
df.to_csv("pagamento.csv", index=False)